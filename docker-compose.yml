version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: transcriber_redis
    ports:
      - "6379:6379" # Expose for simplicity during dev
    volumes:
      - redis_data:/data # Optional: Persist Redis data across restarts
    restart: unless-stopped
    healthcheck: # Added basic Redis healthcheck
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transcriber_web
    ports:
      - "5000:5000"
    volumes:
      - ./data:/data
      - ./output:/output
      - .:/app # Development mount (ensure permissions allow reading)
    environment:
      - REDIS_URL=redis://redis:6379/0
      - FLASK_SECRET_KEY=you_really_should_change_this_secret_key_for_prod # CHANGE THIS
      - PYTHONUNBUFFERED=1
      # - EVENTLET_HUB_USE_SELECT=1 # Removed, usually not needed
      - UPLOAD_FOLDER=/data # Pass via env var
      - OUTPUT_FOLDER=/output # Pass via env var
    depends_on:
      redis: # Wait for Redis to be healthy
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all # Use '1' if you want to limit to one GPU
              capabilities: [gpu]

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: transcriber_worker
    # --- SIMPLIFIED COMMAND - relies on WORKDIR and PYTHONPATH from Dockerfile ---
    command: celery -A celery_app:celery worker --loglevel=info -P eventlet -c 1
    volumes:
      - ./data:/data
      - ./output:/output
      - .:/app # Development mount
    environment:
      - REDIS_URL=redis://redis:6379/0
      - NVIDIA_VISIBLE_DEVICES=all # Ensure worker sees the GPU
      - PYTHONUNBUFFERED=1
      # - EVENTLET_HUB_USE_SELECT=1 # Removed
      - UPLOAD_FOLDER=/data # Pass via env var
      - OUTPUT_FOLDER=/output # Pass via env var
    depends_on:
      redis: # Wait for Redis to be healthy
        condition: service_healthy
      # - web # Usually not needed unless worker directly calls web API
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all # Use '1' if you want to limit to one GPU
              capabilities: [gpu]

volumes:
  redis_data: